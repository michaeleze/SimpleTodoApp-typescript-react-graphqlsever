{"version":3,"sources":["service/index.ts","service/observable.ts","components/addTask/index.tsx","components/modal/index.tsx","layout/index.tsx"],"names":["todoService","url","body","JSON","stringify","query","this","useFetch","task","uniqueId","Math","floor","random","variables","id","text","method","name","fetch","headers","then","response","json","notify","catch","err","console","log","observers","fn","push","data","map","observer","filter","AddTask","props","handleChange","handleCreateNewTask","className","data-testid","onChange","placeholder","onClick","Modal","useState","value","setValue","handleCloseModal","handleUpdateTask","modalItem","isOpen","ariaHideApp","onAfterOpen","event","target","ListItem","lazy","React","memo","list","updateList","addTask","setIsOpen","setmodalItem","useEffect","getTaskList","subscribe","unsubscribe","updateTask","fallback","handleDeleteTask","deleteTask","handleOpenModal","item","find"],"mappings":"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","file":"static/js/3.ec62d2bc.chunk.js","sourcesContent":["/**\n *  All Service and logics here are originally created by\n *  Michael Eze<michaeleze3@gmail.com>\n *  Please do not reproduce\n */\nimport {Observable} from './observable';\n\nclass ToDoService extends Observable {\n  private url: string;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n  }\n\n  public getTaskList() {\n    const body = JSON.stringify({query: \"{getTaskList { \\n id \\n text \\n }}\"});\n\n    this.useFetch(body, 'POST', 'getTaskList');\n  };\n\n  public addTask(task: string) {\n    const uniqueId = Math.floor(Math.random() * 20);\n    const body = JSON.stringify({\n      query: \"mutation ($id: ID!, $text: String!){ addTask (id: $id, text: $text){ \\n id \\n text \\n }}\",\n      variables: {\n        id: uniqueId,\n        text: task\n      }\n    });\n\n    this.useFetch(body, 'POST', 'addTask');\n  };\n\n  public updateTask(id: string, text: string) {\n    const body = JSON.stringify({\n      query: \"mutation ($id: ID!, $text: String!){ updateTask (id: $id, text: $text){ \\n id \\n text \\n }}\",\n      variables: {\n        id: id,\n        text: text\n      }\n    });\n\n    this.useFetch(body, 'POST', 'updateTask');\n   };\n\n  public deleteTask(id: string, text: string) {\n    const body = JSON.stringify({\n      query: \"mutation ($id: ID!){ deleteTask (id: $id){ \\n id \\n text \\n }}\",\n      variables: {\n        id: id,\n      }\n    });\n\n    this.useFetch(body, 'POST', 'deleteTask');\n  };\n\n  private useFetch(body: string, method: string, name: string ) {\n    fetch(this.url, {\n      body: body,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      method: method\n    })\n      .then(response => response?.json())\n      .then(response => this.notify(response['data'][name]))\n      .catch(err => {console.log(err)});\n  }\n}\n\nconst url = 'https://us-central1-sampletodo123.cloudfunctions.net/graphqlApp';\nexport const todoService = new ToDoService(url);\n","/**\n *  One of my favorite patterns\n *  Code is created by Michael Eze<michaeleze3@gmail.com>\n *  Please do not reproduce\n */\nexport class Observable {\n    private observers = [];\n\n    subscribe (fn: any) {\n        // @ts-ignore\n        this.observers.push(fn);\n    }\n\n    notify (data: any) {\n        // @ts-ignore\n        this.observers.map(observer => observer(data))\n    }\n\n    unsubscribe (fn: any) {\n        return this.observers.filter((observer => observer !== fn ))\n    }\n}","import React from 'react';\nimport './index.css';\nimport { IAddTask } from './index.interface';\nimport { FaPlus } from \"react-icons/fa\";\n\nconst AddTask: React.FC<IAddTask> = (props) => {\n  const {\n    handleChange,\n    handleCreateNewTask,\n  } = props;\n\n  return (\n    <table className=\"add-container\" data-testid='add-task'>\n      <tbody>\n        <tr>\n          <td className=\"add-input\">\n            <textarea\n              className=\"add-input--field\"\n              onChange={handleChange}\n              placeholder='Add new task'\n              data-testid=\"add-task-text\"\n            />\n          </td>\n          <td>\n            <button\n              className=\"add-button\"\n              onClick={handleCreateNewTask}\n              data-testid=\"add-button\"\n            >\n              <FaPlus />\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default AddTask;\n","import ReactModal from 'react-modal';\nimport React, { useState } from 'react';\nimport { IModal } from './index.interface';\nimport './index.css';\n\nconst Modal: React.FC<IModal> = (props) => {\n  const [value, setValue] = useState<string>();\n  const {\n    handleCloseModal,\n    handleUpdateTask,\n    modalItem,\n    isOpen,\n  } = props;\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleOnAfterOpen = () => {\n    setValue(modalItem.text);\n  };\n\n  return (\n    <ReactModal\n      ariaHideApp={false}\n      isOpen={isOpen}\n      onAfterOpen={handleOnAfterOpen}\n    >\n      <table className=\"modal-content\">\n        <tbody>\n          <tr>\n            <td className='modal-text'>\n              <textarea className=\"modal-input--field\" onChange={handleOnChange} value={value} data-testid=\"modal-input\" />\n            </td>\n            <td>\n              <div className='modal-options'>\n                <button\n                  className=\"button-accept\"\n                  onClick={() => handleUpdateTask({ id: modalItem?.id, task: value })}\n                  data-testid=\"button-accept\"\n                >\n                  Accept\n                </button>\n                <button className=\"button-reject\" onClick={handleCloseModal} data-testid=\"button-reject\"> Cancel </button>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ReactModal>\n  )\n}\n\nexport default Modal;\n","import React, {\n  lazy,\n  Suspense,\n  useEffect,\n  useState,\n} from 'react';\nimport './index.css';\nimport { todoService } from '../service';\nimport AddTask from \"../components/addTask\";\nimport Modal from \"../components/modal\";\n\nconst ListItem = lazy(() => import('../components/ListItem'));\n\nconst Layout: React.FC = () => {\n  const [list, updateList] = useState<Array<{ id: string, text: string }>>([]);\n  const [task, addTask] = useState<string>(null as unknown as string);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [modalItem, setmodalItem] = useState<any>();\n\n  useEffect(() => {\n    getTaskList();\n  }, [updateList]);\n\n  const getTaskList = () => {\n    todoService.getTaskList();\n    todoService.subscribe((data: any) => {\n      updateList(data);\n    });\n\n    todoService.unsubscribe(() => {\n      return null\n    });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const text = event.target.value;\n    addTask(text);\n  };\n\n  const handleCreateNewTask = () => {\n    todoService.addTask(task);\n    addTask('');\n  };\n\n  const handleUpdateTask = (value: any) => {\n    todoService.updateTask(value.id, value.task);\n    handleCloseModal();\n    addTask('');\n  };\n\n  const handleDeleteTask = (id: string, text: string) => {\n    todoService.deleteTask(id, text);\n  };\n\n  const handleOpenModal = (id: string) => {\n    setIsOpen(true)\n    const item = list.find((item: any) => item.id === id)\n    setmodalItem(item);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpen(false)\n  };\n\n  return (\n    <div className='wrapper'>\n      <div className=\"layout-container\" data-testid=\"layout\">\n        <Modal\n          handleCloseModal={handleCloseModal}\n          handleUpdateTask={handleUpdateTask}\n          modalItem={modalItem}\n          isOpen={isOpen}\n        />\n        <div className=\"layout-add\">\n          <AddTask handleChange={handleChange} handleCreateNewTask={handleCreateNewTask} />\n        </div>\n        <div className=\"layout-list\" data-testid=\"todo-list\">\n          <Suspense fallback={<div>Loading List...</div>}>\n            <ListItem\n              handleDeleteTask={handleDeleteTask}\n              handleOpenModal={handleOpenModal}\n              list={list}\n            />\n          </Suspense>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default React.memo(Layout);\n"],"sourceRoot":""}